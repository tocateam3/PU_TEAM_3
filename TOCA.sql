// CREATE TABLE
CREATE TABLE TRAINING AS (
SELECT A._ID, A.SITE_ID, B.TOCA_CENTER_NAME, A.TOCA_LOCATION_ID, A.TOCA_LOCATION_NAME, A.PLAYERS_ID, A.MBO_PLAYERS,
       A.TRAINING_STARTED_BY, A.TRAINING_STARTED_BY_NAME, A.TRAINER_ID, A.TRAINER_NAME, A.MBO_TRAINER, A.MBO_CLASS,
       A.CATEGORIES, A.PLAYER_PATHWAY_ID, A.PATHWAY_NAME, A.PATHWAY_SESSION_NUMBER,
       A.EXERCISES_STARTED, A.EXERCISES_COMPLETED, A.CUSTOM_EXERCISES_STARTED, A.CUSTOM_EXERCISES_COMPLETED,
       A.TOTAL_BALLS_FIRED, A.TOTAL_GOALS
FROM FIVETRAN.MONGO_TOCADB.TRAINING A LEFT JOIN FIVETRAN.MONGO_TOCADB.TRAINING_SESSION_CSVDATA B
ON A._ID = B.TRAINING_ID);

CREATE TABLE CATEGORY_CUMULATIVE_RECORD AS (
SELECT _ID, STARTED, CATEGORY_NAME, CATEGORY_ID
FROM FIVETRAN.MONGO_TOCADB.CATEGORY_CUMULATIVE_RECORD);

CREATE TABLE CUSTOMER_TRAINING_FEEDBACK AS (
SELECT TRAINING_ID, RATING
FROM FIVETRAN.MONGO_TOCADB.CUSTOMER_TRAINING_FEEDBACK);

CREATE TABLE PLAYER_PATHWAY AS (
SELECT _ID, STRING_PLAYER_ID, SITE_ID, PATHWAY_ID, PLAYER_PATHWAY_SESSIONS, BALLS_DELIVERED, GOALS_SCORED, EXERCISES_COMPLETED
FROM FIVETRAN.MONGO_TOCADB.PLAYER_PATHWAY);

CREATE TABLE EXERCISE_CUMULATIVE_RECORD AS (
SELECT _ID, EXERCISE_ID, EXERCISE_NAME, STARTED, COMPLETED
FROM FIVETRAN.MONGO_TOCADB.EXERCISE_CUMULATIVE_RECORD);

CREATE TABLE TRAINED_HISTORY AS (
SELECT _ID, TRAINED_HISTORY_SUMMARY, PLAYER_ID
FROM FIVETRAN.MONGO_TOCADB.TRAINED_HISTORY);

CREATE TABLE TRAINING_SESSION_CSVDATA AS (
SELECT _ID, DATE, TRAINER_NAME, MBO_TRIANER, MBO_PLAYERS, NUMBER_OF_EXERCISES_STARTED, NUMBER_OF_EXERCISES_COMPLETED,
       NUMBER_OF_CATEGORIES_STARTED,  CATEGORIES_NAME,
       NUMBER_OF_PLAYERS, NUMBER_OF_CUSTOM_EXERCISES_STARTED, NUMBER_OF_CUSTOM_EXERCISES_COMPLETED,
       PATHWAY_SESSION_NUMBER, PLAYER_PATHWAY_ID, PATHWAY_NAME, TRAINING_ID,
       WARM_UP_BALLS_FIRED, FOCUS_ONE_BALLS_FIRED, FOCUS_TWO_BALLS_FIRED, COMPETITION_BALLS_FIRED, TOTAL_BALLS_FIRED, TOTAL_GOALS,
       SITE_ID, TOCA_CENTER_NAME
FROM FIVETRAN.MONGO_TOCADB.TRAINING_SESSION_CSVDATA);

CREATE TABLE TRAINING_SESSION_SUMMARY AS (
SELECT EXCERCISES_COMPLETED, TRAINER_NAME, TOUCH_COUNT, TOTAL_TOUCHES, NAME, PLAYER_ID
FROM FIVETRAN.MONGO_TOCADB.TRAINING_SESSION_SUMMARY);

CREATE TABLE TRAINING_SUMMARY AS (
SELECT _ID, GREEN_SCORE_BOARD, EXCERCISES_COMPLETED, RED_SCORE_BOARD, YELLOW_SCORE_BOARD, TIME_ZONE_OFFSET,
       SESSIONS_COMPLETED, TRAINING_TIME, TOTAL_BALLS_FIRED, BLUE_SCORE_BOARD, PLAYER_ID, GOALS, OLD_PASSES_ADDED,
       CUMULATIVE_BEST_STREAK, CUMULATIVE_RECOVERIES, STRING_CLIENT_ID_EXISTS, BEST_PASSES_STREAK, CUMULATIVE_PASSES,
       COMPLETED_PATHWAY_COUNT, PLAYER_PATHWAY_OPT_OUT, SITE_ID, PLAYER_PATHWAY_COMPLETED, PLAYER_PATHWAY_PROGRESS,
       GAMES_SUMMARY
FROM FIVETRAN.MONGO_TOCADB.TRAINING_SUMMARY);

// TABLE CLEANING
// REMOVE D-BAT
SELECT * FROM TRAINING_SESSION_CSVDATA WHERE TOCA_CENTER_NAME LIKE 'D-BAT%';

DELETE FROM TRAINING_SESSION_CSVDATA WHERE TOCA_CENTER_NAME LIKE 'D-BAT%';

SELECT DISTINCT TOCA_CENTER_NAME FROM TRAINING_SESSION_CSVDATA;

// REMOVE NULL TRAINER NAME
// TRAINING TABLE
SELECT TRAINER_NAME FROM TRAINING WHERE TRAINER_NAME IS NULL;
SELECT TRAINER_NAME FROM TRAINING WHERE TRAINER_NAME='';

DELETE FROM TRAINING WHERE TRAINER_NAME IS NULL;
DELETE FROM TRAINING WHERE TRAINER_NAME='';

// TRAINING_SESSION_CSVDATA TABLE
SELECT TRAINER_NAME FROM TRAINING_SESSION_CSVDATA WHERE TRAINER_NAME IS NULL;
SELECT TRAINER_NAME FROM TRAINING_SESSION_CSVDATA WHERE TRAINER_NAME='';

DELETE FROM TRAINING_SESSION_CSVDATA WHERE TRAINER_NAME IS NULL;
DELETE FROM TRAINING_SESSION_CSVDATA WHERE TRAINER_NAME='';

// TRAINING_SESSION_SUMMARY TABLE
SELECT TRAINER_NAME FROM TRAINING_SESSION_SUMMARY WHERE TRAINER_NAME IS NULL;
SELECT TRAINER_NAME FROM TRAINING_SESSION_SUMMARY WHERE TRAINER_NAME='';

DELETE FROM TRAINING_SESSION_SUMMARY WHERE TRAINER_NAME IS NULL;
DELETE FROM TRAINING_SESSION_SUMMARY WHERE TRAINER_NAME='';

// REMOVE NUMBER_OF_PLAYERS=0
// TRAINING_SESSION_CSVDATA TABLE
SELECT DISTINCT NUMBER_OF_PLAYERS FROM TRAINING_SESSION_CSVDATA;
SELECT NUMBER_OF_PLAYERS FROM TRAINING_SESSION_CSVDATA WHERE NUMBER_OF_PLAYERS='0';
DELETE FROM TRAINING_SESSION_CSVDATA WHERE NUMBER_OF_PLAYERS='0';

// REMOVE EMPTY COLUMN
// TRAINING TABLE
SELECT DISTINCT TRAINING_SESSION_TYPE FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN TRAINING_SESSION_TYPE;

SELECT DISTINCT TOTAL_SESSIONS_IN_PATHWAY FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN TOTAL_SESSIONS_IN_PATHWAY;

SELECT DISTINCT PATHWAY_NAME FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN PATHWAY_NAME;

SELECT DISTINCT PASSES_STREAK FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN PASSES_STREAK;

SELECT DISTINCT PASSES_COMPLETED FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN PASSES_COMPLETED;

SELECT DISTINCT PATHWAY_SESSION_NUMBER FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN PATHWAY_SESSION_NUMBER;

SELECT DISTINCT EXERCISES_COUNT_IDLE_FOR_GREATER_THAN_151_SECONDS FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN EXERCISES_COUNT_IDLE_FOR_GREATER_THAN_151_SECONDS;

SELECT DISTINCT EXERCISES_COUNT_IDLE_FOR_LESS_THAN_90_SECONDS FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN EXERCISES_COUNT_IDLE_FOR_LESS_THAN_90_SECONDS;

SELECT DISTINCT EXERCISES_IDLE_BETWEEN_91_TO_120_SECONDS_IN_MILLIS FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN EXERCISES_IDLE_BETWEEN_91_TO_120_SECONDS_IN_MILLIS;

SELECT DISTINCT EXERCISES_IDLE_BETWEEN_121_TO_150_SECONDS_IN_MILLIS FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN EXERCISES_IDLE_BETWEEN_121_TO_150_SECONDS_IN_MILLIS;

SELECT DISTINCT EXERCISES_IDLE_GREATER_THAN_151_SECONDS_IN_MILLIS FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN EXERCISES_IDLE_GREATER_THAN_151_SECONDS_IN_MILLIS;

SELECT DISTINCT EXERCISES_COUNT_IDLE_BETWEEN_91_TO_120_SECONDS FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN EXERCISES_COUNT_IDLE_BETWEEN_91_TO_120_SECONDS;

SELECT DISTINCT EXERCISES_COUNT_IDLE_BETWEEN_121_TO_150_SECONDS FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN EXERCISES_COUNT_IDLE_BETWEEN_121_TO_150_SECONDS;

SELECT DISTINCT EXERCISES_IDLE_FOR_LESS_THAN_90_SECONDS_IN_MILLIS FROM TRAINING;
ALTER TABLE TRAINING DROP COLUMN EXERCISES_IDLE_FOR_LESS_THAN_90_SECONDS_IN_MILLIS;

// TRAINING_SESSION_CSVDATA TABLE
SELECT DISTINCT COMPETITION_BALLS_FIRED FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN COMPETITION_BALLS_FIRED;

SELECT DISTINCT EXERCISES_COUNT_IDLE_FOR_GREATER_THAN_151_SECONDS FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN EXERCISES_COUNT_IDLE_FOR_GREATER_THAN_151_SECONDS;

SELECT DISTINCT EXERCISES_COUNT_IDLE_FOR_LESS_THAN_90_SECONDS FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN EXERCISES_COUNT_IDLE_FOR_LESS_THAN_90_SECONDS;

SELECT DISTINCT EXERCISES_IDLE_BETWEEN_121_TO_150_SECONDS_IN_MILLIS FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN EXERCISES_IDLE_BETWEEN_121_TO_150_SECONDS_IN_MILLIS;

SELECT DISTINCT EXERCISES_IDLE_BETWEEN_91_TO_120_SECONDS_IN_MILLIS FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN EXERCISES_IDLE_BETWEEN_91_TO_120_SECONDS_IN_MILLIS;

SELECT DISTINCT EXERCISES_IDLE_GREATER_THAN_151_SECONDS_IN_MILLIS FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN EXERCISES_IDLE_GREATER_THAN_151_SECONDS_IN_MILLIS;

SELECT DISTINCT EXERCISES_COUNT_IDLE_BETWEEN_121_TO_150_SECONDS FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN EXERCISES_COUNT_IDLE_BETWEEN_121_TO_150_SECONDS;

SELECT DISTINCT EXERCISES_COUNT_IDLE_BETWEEN_91_TO_120_SECONDS FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN EXERCISES_COUNT_IDLE_BETWEEN_91_TO_120_SECONDS;

SELECT DISTINCT EXERCISES_IDLE_FOR_LESS_THAN_90_SECONDS_IN_MILLIS FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN EXERCISES_IDLE_FOR_LESS_THAN_90_SECONDS_IN_MILLIS;

SELECT DISTINCT PATHWAY_SESSION_NUMBER FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN PATHWAY_SESSION_NUMBER;

SELECT DISTINCT AVERAGE_EXERCISES_IDLE_TIME FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN AVERAGE_EXERCISES_IDLE_TIME;

SELECT DISTINCT WARM_UP_BALLS_FIRED FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN WARM_UP_BALLS_FIRED;

SELECT DISTINCT FOCUS_ONE_BALLS_FIRED FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN FOCUS_ONE_BALLS_FIRED;

SELECT DISTINCT FOCUS_TWO_BALLS_FIRED FROM TRAINING_SESSION_CSVDATA;
ALTER TABLE TRAINING_SESSION_CSVDATA DROP COLUMN FOCUS_TWO_BALLS_FIRED;

// Extract Category ID
CREATE TABLE CATEGORY_ID AS (
SELECT A.STARTED, A.CATEGORY_NAME, B._ID, B.CATEGORY_ID
FROM CATEGORY_CUMULATIVE_RECORD AS A,
(SELECT _ID, REPLACE(SUBSTRING(CATEGORIES, 9, 2), ',', '') AS CATEGORY_ID
FROM TRAINING) AS B
WHERE A.CATEGORY_ID=B.CATEGORY_ID
);

SELECT * FROM CATEGORY_ID;

SELECT * FROM TRAINING, TRAINING_SUMMARY WHERE TRAINING.PLAYER_ID=TRAINING_SUMMARY.PLAYER_ID;

// COPY MART TABLES
CREATE TABLE DIM_CLIENTS AS (
    SELECT * FROM CENTRAL_DATA.MART.DIM_CLIENTS
);

CREATE TABLE FACT_CUSTOMERS AS (
    SELECT * FROM CENTRAL_DATA.MART.FACT_CUSTOMERS
);

CREATE TABLE FACT_VISITS AS (
    SELECT * FROM CENTRAL_DATA.MART.FACT_VISITS
);

// PERCENT RECORDS IMPACTED
// TRAINING TABLE
SELECT A.TRAINING_BEFORE, B.TRAINING_AFTER,
       (A.TRAINING_BEFORE-B.TRAINING_AFTER)/A.TRAINING_BEFORE AS PERCENTAGE_IMPACTED
FROM (SELECT COUNT(*) AS TRAINING_BEFORE FROM TRAINING) AS A,
(SELECT COUNT(*) AS TRAINING_AFTER FROM TRAINING) AS B;

// TRAINING_SESSION_CSVDATA TABLE
SELECT A.TRAINING_SESSION_BEFORE, B.TRAINING_SESSION_AFTER,
       (A.TRAINING_SESSION_BEFORE-B.TRAINING_SESSION_AFTER)/A.TRAINING_SESSION_BEFORE AS PERCENTAGE_IMPACTED
FROM (SELECT COUNT(*) AS TRAINING_SESSION_BEFORE FROM TRAINING_SESSION_CSVDATA) AS A,
(SELECT COUNT(*) AS TRAINING_SESSION_AFTER FROM TRAINING_SESSION_CSVDATA) AS B;

SELECT * FROM TRAINING LEFT JOIN CATEGORY_ID ON TRAINING._ID=CATEGORY_ID._ID;

// DIRECT PARSE JSON
SELECT CATEGORIES FROM TRAINING LIMIT 50;

SELECT F.VALUE
FROM TRAINING,  TABLE ( FLATTEN(CATEGORIES) ) F
LIMIT 50;

// COPY VIEW
CREATE TABLE MONGO_DB_TRAINING AS (
  SELECT * FROM CENTRAL_DATA.BASE.MONGO_DB_TRAINING
);

CREATE TABLE UPLOADS_TRAINING_EXPERIENCE AS (
  SELECT * FROM CENTRAL_DATA.BASE.UPLOADS_TRAINING_EXPERIENCE
);

// JSON PARSE
// CATEGORIES TABLE
CREATE TABLE JSON_CATEGORIES AS (
SELECT  _ID AS TRAINING_ID,
        F.VALUE:_id::NUMBER AS CATEGORY_ID_NUM,
        F.VALUE:categoryId::STRING AS CATEGORY_ID,
        F.VALUE:exercisesCompleted::NUMBER AS EXERCISES_COMPLETED,
        F.VALUE:exercisesStarted::NUMBER AS EXERCISES_STARTED,
        F.VALUE:name::STRING AS NAME,
        F.VALUE:totalBallsFired::NUMBER AS TOTAL_BALLS_FIRED,
        F.VALUE:exercises AS EXERCISES
FROM TRAINING, TABLE ( FLATTEN(CATEGORIES) ) F
WHERE CATEGORIES IS NOT NULL
);

// EXERCISES TABLE
CREATE TABLE JSON_EXERCISES AS (
SELECT CATEGORY_ID,
       F.VALUE:_id::NUMBER AS EXERCISE_ID_NUM,
       F.VALUE:exerciseId::STRING AS EXERCISE_ID,
       F.VALUE:name::STRING AS NAME,
       F.VALUE:status::STRING AS STATUS,
       F.VALUE:totalBallsFired::NUMBER AS TOTAL_BALLS_FIRED
FROM JSON_CATEGORIES, TABLE ( FLATTEN(EXERCISES) ) F
);

// DELIVERIES TABLE
CREATE TABLE JSON_DELIVERIES AS (
SELECT EXERCISE_ID,
       F.VALUE:_id::NUMBER AS _ID,
       F.VALUE:angle::STRING AS ANGLE,
       F.VALUE:ballCount::NUMBER AS BALL_COUNT,
       F.VALUE:deliveryCodeId::STRING AS DELIVERY_CODE_ID,
       F.VALUE:elevation::STRING AS ELEVATION,
       F.VALUE:name::STRING AS NAME,
       F.VALUE:repeatCount::NUMBER AS REPEAT_COUNT,
       F.VALUE:speed::STRING AS SPEED,
       F.VALUE:timeInterval::NUMBER AS TIME_INTERVAL
FROM JSON_EXERCISES, TABLE ( FLATTEN(DELIVERY_CODES) ) F
);

// DELETE REMAIN COLUMN
ALTER TABLE JSON_CATEGORIES
DROP COLUMN EXERCISES;

ALTER TABLE JSON_EXERCISES
DROP COLUMN DELIVERY_CODES;

// TRAINING SCOREBOARD
CREATE TABLE JSON_TRAINING_SCOREBOARD AS (
    SELECT _ID AS TRAINING_ID,
           RED_SCORE_BOARD:goals::NUMBER AS RED_SCORE_BOARD_GOALS,
           RED_SCORE_BOARD:randomGoals::NUMBER AS RED_SCORE_BOARD_GOALS_RANDOM_GOALS,
           BLUE_SCORE_BOARD:goals::NUMBER AS BLUE_SCORE_BOARD_GOALS,
           BLUE_SCORE_BOARD:randomGoals::NUMBER AS BLUE_SCORE_BOARD_GOALS_RANDOM_GOALS,
           YELLOW_SCORE_BOARD:goals::NUMBER AS YELLOW_SCORE_BOARD_GOALS,
           YELLOW_SCORE_BOARD:randomGoals::NUMBER AS YELLOW_SCORE_BOARD_GOALS_RANDOM_GOALS,
           GREEN_SCORE_BOARD:goals::NUMBER AS GREEN_SCORE_BOARD_GOALS,
           GREEN_SCORE_BOARD:randomGoals::NUMBER AS GREEN_SCORE_BOARD_GOALS_RANDOM_GOALS
FROM TRAINING
);

// TRAINING CATEGORIES COMBINE TABLE
CREATE TABLE JSON_TRAINING_CATEGORIES AS (
SELECT  A.TRAINING_ID,
        A.CATEGORY_ID,
        A._ID AS CATEGORY_ID_NUM,
        A.END_TIME AS CATEGORY_END_TIME,
        A.EXERCISES_COMPLETED AS CATEGORY_EXERCISES_COMPLETED,
        A.EXERCISES_STARTED AS CATEGORY_EXERCISES_STARTED,
        A.NAME AS CATEGORY_NAME,
        A.START_TIME AS CATEGORY_START_TIME,
        A.TOTAL_BALLS_FIRED AS CATEGORY_TOTAL_BALLS_FIRED,
        A.CHALLENGE AS CATEGORY_CHALLENGE,
        B.EXERCISE_ID,
        B._ID AS EXERCISE_ID_NUM,
        B.ADJUSTED AS EXERCISE_ADJUSTED,
        B.END_TIME AS EXERCISE_END_TIME,
        B.NAME AS EXERCISE_NAME,
        B.START_TIME AS EXERCISE_START_TIME,
        B.STATUS AS EXERCISE_STATUS,
        B.TOTAL_BALLS_FIRED AS EXERCISE_TOTAL_BALLS_FIRED,
        B.RED_SCORE_BOARD_GOALS AS EXERCISE_RED_SCORE_BOARD_GOALS,
        B.RED_SCORE_BOARD_GOALS_RANDOM_GOALS AS EXERCIE_RED_SCORE_BOARD_GOALS_RANDOM_GOALS,
        B.BLUE_SCORE_BOARD_GOALS AS EXERCISE_BLUE_SCORE_BOARD_GOALS,
        B.BLUE_SCORE_BOARD_GOALS_RANDOM_GOALS AS EXERCISE_BLUE_SCORE_BOARD_GOALS_RANDOM_GOALS,
        B.YELLOW_SCORE_BOARD_GOALS AS EXERCISE_YELLOW_SCORE_BOARD_GOALS,
        B.YELLOW_SCORE_BOARD_GOALS_RANDOM_GOALS AS EXERCISE_YELLOW_SCORE_BOARD_GOALS_RANDOM_GOALS,
        B.GREEN_SCORE_BOARD_GOALS AS EXERCISE_GREEN_SCORE_BOARD_GOALS,
        B.GREEN_SCORE_BOARD_GOALS_RANDOM_GOALS AS EXERCISE_GREEN_SCORE_BOARD_GOALS_RANDOM_GOALS,
        C.DELIVERY_CODE_ID,
        C._ID AS DELIVERY_ID_NUM,
        C.ANGLE AS DELIVERY_ANGLE,
        C.BALL_COUNT AS DELIVERY_BALL_COUNT,
        C.ELEVATION AS DELIVERY_ELEVATION,
        C.NAME DELIVERY_NAME,
        C.REPEAT_COUNT AS DELIVERY_REPEAT_COUNT,
        C.SPEED AS DELIVERY_SPEED,
        C.TIME_INTERVAL AS DELIVERY_TIME_INTERVAL
FROM JSON_CATEGORIES AS A RIGHT JOIN JSON_EXERCISES AS B
ON A.CATEGORY_ID = B.CATEGORY_ID
RIGHT JOIN JSON_DELIVERIES AS C
ON B.EXERCISE_ID = C.EXERCISE_ID
);

// PLAYGROUND
SELECT DISTINCT (PLAYERS_ID) FROM FIVETRAN.MONGO_TOCADB.TRAINING;

SELECT PLAYERS_ID, TRAINER_NAME, TRAINER_ID, CATEGORIES FROM TRAINING
WHERE CATEGORIES IS NOT NULL
AND TRAINER_NAME IS NOT NULL;

SELECT TRAINING.TRAINER_NAME, TRAINER_ID FROM TRAINING, UPLOADS_TRAINING_EXPERIENCE
WHERE TRAINING.TRAINER_NAME = UPLOADS_TRAINING_EXPERIENCE.TRAINER_NAME;

SELECT * FROM JSON_EXERCISES INNER JOIN EXERCISE_CUMULATIVE_RECORD
WHERE JSON_EXERCISES._ID = EXERCISE_CUMULATIVE_RECORD.EXERCISE_ID;

// TRAINING ID TABLE
CREATE TABLE JSON_TRAINING_ID AS (
SELECT _ID AS TRAINING_ID,
       F.VALUE::NUMBER AS PLAYER_ID,
       TRAINER_ID
FROM TRAINING, TABLE ( FLATTEN(PLAYERS_ID) ) F
);

// TRAINING MBO ID TABLE
CREATE TABLE JSON_TRAINING_MBO_ID AS (
SELECT _ID AS TRAINING_ID,
       CONCAT(MBO_TRAINER:_id::NUMBER, '-', SITE_ID) AS MBO_TRAINER_ID
FROM TRAINING, TABLE ( FLATTEN(MBO_PLAYERS) ) F
);

// PLAYER PATHWAY SESSION TABLE
CREATE TABLE JSON_PLAYER_PATHWAY_SESSION AS (
SELECT PATHWAY_ID, PATHWAY_ID_NUM, F.VALUE:_id::NUMBER AS PLAYER_PATHWAY_SESSIONS_ID,
       F.VALUE:name::STRING AS PLAYER_PATHWAY_SESSIONS_NAME
FROM (
SELECT _ID AS PATHWAY_ID, PATHWAY_ID AS PATHWAY_ID_NUM, F.VALUE:focusInfos AS INFO
FROM PLAYER_PATHWAY, TABLE ( FLATTEN(PLAYER_PATHWAY_SESSIONS) ) F) AS A,
             TABLE ( FLATTEN(INFO) ) F
);

// TRAINING SUMMARY SCOREBOARD
CREATE TABLE JSON_TRAINING_SUMMARY_SCOREBOARD AS (
    SELECT _ID AS TRAINING_SUMMARY_ID,
           RED_SCORE_BOARD:goals::NUMBER AS RED_SCORE_BOARD_GOALS,
           RED_SCORE_BOARD:randomGoals::NUMBER AS RED_SCORE_BOARD_GOALS_RANDOM_GOALS,
           BLUE_SCORE_BOARD:goals::NUMBER AS BLUE_SCORE_BOARD_GOALS,
           BLUE_SCORE_BOARD:randomGoals::NUMBER AS BLUE_SCORE_BOARD_GOALS_RANDOM_GOALS,
           YELLOW_SCORE_BOARD:goals::NUMBER AS YELLOW_SCORE_BOARD_GOALS,
           YELLOW_SCORE_BOARD:randomGoals::NUMBER AS YELLOW_SCORE_BOARD_GOALS_RANDOM_GOALS,
           GREEN_SCORE_BOARD:goals::NUMBER AS GREEN_SCORE_BOARD_GOALS,
           GREEN_SCORE_BOARD:randomGoals::NUMBER AS GREEN_SCORE_BOARD_GOALS_RANDOM_GOALS
FROM TRAINING_SUMMARY
);

// TRAINING SUMMARY PLAYER PATHWAY
CREATE TABLE JSON_TRAINING_SUMMARY_PLAYER_PATHWAY AS (
SELECT _ID AS TRAINING_SUMMARY_ID,
       PLAYER_ID,
       F.VALUE:created::NUMBER AS COMPLETED_PATHWAY_CREATED,
       F.VALUE:pathwayId::NUMBER AS COMPLETED_PATHWAY_ID_NUM,
       F.VALUE:pathwayName::STRING AS COMPLETED_PATHWAY_NAME,
       F.VALUE:playerPathwayId::STRING AS COMPLETED_PATHWAY_ID,
       F.VALUE:totalSessionsInPathway::NUMBER AS COMPLETED_PATHWAY_TOTAL_SESSIONS,
       PLAYER_PATHWAY_PROGRESS:completedSessionsInPathway::NUMBER AS PROGRESS_PATHWAY_COMPLETED_SESSIONS,
       PLAYER_PATHWAY_PROGRESS:currentOngoingPathwayId::NUMBER AS PROGRESS_PATHWAY_ID_NUM,
       PLAYER_PATHWAY_PROGRESS:currentOngoingPathwayName::STRING AS PROGRESS_PATHWAY_NAME,
       PLAYER_PATHWAY_PROGRESS:currentOngoingPlayerPathwayId::STRING AS PROGRESS_PATHWAY_PATHWAY_ID,
       PLAYER_PATHWAY_PROGRESS:totalSessionsInPathway::NUMBER AS PROGRESS_PATHWAY_TOTAL_SESSIONS,
       GAMES_SUMMARY:gamesCompleted::NUMBER AS GAMES_SUMMARY_GAMES_COMPLETED,
       GAMES_SUMMARY:totalBalls::NUMBER AS GAMES_SUMMARY_TOTAL_BALLS,
       GAMES_SUMMARY:totalGoals::NUMBER AS GAMES_SUMMARY_TOTAL_GOALS,
       GAMES_SUMMARY:trainingTime::NUMBER AS GAMES_SUMMARY_TRAINING_TIME
FROM TRAINING_SUMMARY, TABLE ( FLATTEN(PLAYER_PATHWAY_COMPLETED) ) F
);

// TRAINING CLEAN TABLE
CREATE TABLE TRAINING_CLEAN AS (
SELECT * FROM TRAINING
WHERE TRAINER_NAME IS NOT NULL AND
TOCA_LOCATION_NAME IS NOT NULL AND
TOCA_LOCATION_NAME NOT LIKE '%DBAT%'
);

// TOTAL CLASS TRAINER COMPLETED TABLE
CREATE TABLE TOTAL_CLASS_TRAINER_COMPLETED AS (
SELECT TRAINER_NAME, TRAINER_ID, TOCA_LOCATION_ID, TOCA_LOCATION_NAME,
       COUNT(TRAINER_NAME) AS NUMBER_OF_TRAINING
FROM TRAINING_CLEAN
GROUP BY TRAINER_ID, TRAINER_NAME, TOCA_LOCATION_ID, TOCA_LOCATION_NAME
);

// TRAINER INFO TABLE
CREATE TABLE TRAINER_INFO AS(
SELECT _ID AS TRAINING_ID, TRAINING_STARTED_BY, TRAINING_STARTED_BY_NAME, TRAINER_ID, TRAINER_NAME
FROM TRAINING
);

// ALTER TRAINER INFO TABLE
UPDATE TRAINER_INFO
SET TRAINING_STARTED_BY = TRAINER_ID, TRAINING_STARTED_BY_NAME = TRAINER_NAME
WHERE TRAINING_STARTED_BY_NAME IS NULL AND TRAINER_NAME IS NOT NULL;

ALTER TABLE TRAINER_INFO
DROP COLUMN TRAINER_ID;

ALTER TABLE TRAINER_INFO
DROP COLUMN TRAINER_NAME;

ALTER TABLE TRAINER_INFO
RENAME COLUMN TRAINING_STARTED_BY TO TRAINER_ID;

ALTER TABLE TRAINER_INFO
RENAME COLUMN TRAINING_STARTED_BY_NAME TO TRAINER_NAME;

DELETE FROM TRAINER_INFO WHERE TRAINER_NAME IS NULL;

// PLAYER INFO TABLE
CREATE TABLE PLAYER_INFO AS(
SELECT _ID AS TRAINING_ID, F.VALUE::NUMBER AS PLAYER_ID
FROM TRAINING, TABLE ( FLATTEN(PLAYERS_ID) ) F
);

// ALTER MBO_TRAINER IN TRAINING_SESSION_CSVDATA
UPDATE TRAINING_SESSION_CSVDATA
SET MBO_TRIANER = MBO_TRIANER:_id::NUMBER;

// MBO TRAINER INFO TABLE
CREATE TABLE MBO_TRAINER_INFO AS (
SELECT DISTINCT A.TRAINING_ID, A.MBO_TRAINER_ID, TRAINER_NAME
FROM JSON_TRAINING_MBO_ID A LEFT JOIN (
SELECT DISTINCT CONCAT(TRAINER_ID, '-', CENTER_ID) AS MBO_TRAINER_ID,
                CONCAT(TRAINER_FIRST_NAME, ' ', TRAINER_LAST_NAME) AS TRAINER_NAME
FROM CENTRAL_DATA.MART.FACT_VISITS
) B
ON A.MBO_TRAINER_ID = B.MBO_TRAINER_ID
);

DELETE FROM MBO_TRAINER_INFO WHERE TRAINER_NAME IS NULL;

CREATE TABLE MBO_TRAINER_INFO_2 AS (
SELECT DISTINCT * FROM MBO_TRAINER_INFO
);


// MBO PLAYER INFO TABLE
CREATE TABLE MBO_PLAYER_INFO AS (
SELECT _ID AS TRAINING_ID,
       F.VALUE:_id::NUMBER AS MBO_PLAYER_ID
FROM TRAINING, TABLE ( FLATTEN(MBO_PLAYERS) ) F
);

// ALTER TRAINING TABLE
UPDATE TRAINING
SET SITE_ID = TOCA_LOCATION_ID, TOCA_CENTER_NAME = TOCA_LOCATION_NAME
WHERE TOCA_CENTER_NAME IS NULL AND TOCA_LOCATION_NAME IS NOT NULL;

ALTER TABLE TRAINING
DROP COLUMN TOCA_LOCATION_ID;

ALTER TABLE TRAINING
DROP COLUMN TOCA_LOCATION_NAME;

// DROP PARSED COLUMNS
ALTER TABLE TRAINING
DROP COLUMN PLAYERS_ID;

ALTER TABLE TRAINING
DROP COLUMN MBO_PLAYERS;

ALTER TABLE TRAINING
DROP COLUMN TRAINING_STARTED_BY, TRAINING_STARTED_BY_NAME, TRAINER_ID, TRAINER_NAME;

ALTER TABLE TRAINING
DROP COLUMN MBO_TRAINER, MBO_CLASS;

ALTER TABLE TRAINING
DROP COLUMN CATEGORIES;

ALTER TABLE TRAINING_SESSION_CSVDATA
DROP COLUMN TRAINER_NAME, MBO_TRIANER, MBO_PLAYERS;

ALTER TABLE TRAINING_SESSION_CSVDATA
DROP COLUMN CATEGORIES_NAME;

ALTER TABLE PLAYER_PATHWAY
DROP COLUMN PLAYER_PATHWAY_SESSIONS;

// DROP D-BAT ROWS
// TRAINING TABLE
SELECT DISTINCT SITE_ID, TOCA_CENTER_NAME FROM TRAINING
WHERE TOCA_CENTER_NAME  LIKE '%BAT%';

SELECT DISTINCT SITE_ID, TOCA_CENTER_NAME FROM TRAINING
WHERE SITE_ID = '616713' OR SITE_ID = '614203' OR SITE_ID = '276683' OR SITE_ID = '115'
OR SITE_ID = '276364' OR SITE_ID = '3720'
ORDER BY SITE_ID;

DELETE FROM TRAINING
WHERE SITE_ID = '616713' OR SITE_ID = '614203' OR SITE_ID = '276683' OR SITE_ID = '115'
OR SITE_ID = '276364' OR SITE_ID = '3720';

// TRAINING SESSION
SELECT DISTINCT SITE_ID, TOCA_CENTER_NAME FROM TRAINING_SESSION_CSVDATA
WHERE TOCA_CENTER_NAME  LIKE '%BAT%';

SELECT DISTINCT SITE_ID, TOCA_CENTER_NAME FROM TRAINING_SESSION_CSVDATA
WHERE SITE_ID = '616713' OR SITE_ID = '614203' OR SITE_ID = '276683' OR SITE_ID = '115'
OR SITE_ID = '276364' OR SITE_ID = '3720'
ORDER BY SITE_ID;

DELETE FROM TRAINING_SESSION_CSVDATA
WHERE SITE_ID = '616713' OR SITE_ID = '614203' OR SITE_ID = '276683' OR SITE_ID = '115'
OR SITE_ID = '276364' OR SITE_ID = '3720';

// TRAINING SESSION CATEGORIES NAME
CREATE TABLE TRAINING_SESSION_CATEGORIES_NAME AS (
SELECT _ID AS TRAINING_SESSION_ID, F.VALUE::STRING AS CATEGORIES_NAME
FROM TRAINING_SESSION_CSVDATA, TABLE ( FLATTEN(CATEGORIES_NAME) ) F
);

// MAIN TABLE
CREATE TABLE MAIN_TEMP AS (
SELECT  A._ID AS TRAINING_ID,
        B._ID AS TRAINING_SESSION_ID,
        B.DATE,
        A.SITE_ID,
        A.TOCA_CENTER_NAME,
        A.PLAYER_PATHWAY_ID,
        A.PATHWAY_NAME,
        A.PATHWAY_SESSION_NUMBER,
        A.TOTAL_BALLS_FIRED,
        A.TOTAL_GOALS,
        B.NUMBER_OF_EXERCISES_STARTED,
        B.NUMBER_OF_EXERCISES_COMPLETED,
        B.NUMBER_OF_CATEGORIES_STARTED,
        B.NUMBER_OF_PLAYERS,
        B.NUMBER_OF_CUSTOM_EXERCISES_STARTED,
        B.NUMBER_OF_CUSTOM_EXERCISES_COMPLETED,
        B.WARM_UP_BALLS_FIRED,
        B.FOCUS_ONE_BALLS_FIRED,
        B.FOCUS_TWO_BALLS_FIRED,
        B.COMPETITION_BALLS_FIRED
FROM TRAINING A, TRAINING_SESSION_CSVDATA B
WHERE A._ID = B.TRAINING_ID
);

// ALTER MAIN TABLE
// COMBINE PLAYER PATHWAY TABLE
CREATE TABLE MAIN_2 AS (
SELECT A.*, B.PATHWAY_ID AS PATHWAY_ID_NUM, B.BALLS_DELIVERED, B.GOALS_SCORED, B.EXERCISES_COMPLETED
FROM MAIN A LEFT JOIN PLAYER_PATHWAY B
ON A.PLAYER_PATHWAY_ID = B._ID
);

// ADD TRAINER INFO
CREATE TABLE MAIN_3 AS (
SELECT A.*, B.TRAINER_ID, B.TRAINER_NAME, C.MBO_TRAINER_ID, C.TRAINER_NAME AS MBO_TRAINER_NAME
FROM MAIN A LEFT JOIN TRAINER_INFO B
ON A.TRAINING_ID = B.TRAINING_ID LEFT JOIN MBO_TRAINER_INFO C
ON A.TRAINING_ID = C.TRAINING_ID
);

// COMBINE
UPDATE MAIN
SET TRAINER_NAME = MBO_TRAINER_NAME
WHERE TRAINER_NAME IS NULL AND MBO_TRAINER_NAME IS NOT NULL;

ALTER TABLE MAIN
DROP COLUMN TRAINER_ID;

ALTER TABLE MAIN
DROP COLUMN MBO_TRAINER_NAME;

ALTER TABLE MAIN
DROP COLUMN MBO_TRAINER_ID;

// FORMATTING TRAINER NAME
SELECT TRAINER_NAME FROM MAIN
WHERE TRAINER_NAME = '(AJ)Akwafei Ajeakwa'
OR TRAINER_NAME = 'Aj Ajeakwa';

UPDATE MAIN
SET TRAINER_NAME = 'Akwafei Ajeakwa'
WHERE TRAINER_NAME = '(AJ)Akwafei Ajeakwa'
OR TRAINER_NAME = 'Aj Ajeakwa';

// DELETE EMPTY TRAINER NAME
DELETE FROM MAIN
WHERE TRAINER_NAME IS NULL OR TRAINER_NAME = '';

// PLAYGROUND
SELECT COUNT(*) FROM (
SELECT DISTINCT TRAINING_ID FROM TRAINER_INFO
) A;

SELECT COUNT(*) FROM (
SELECT DISTINCT TRAINING_ID FROM MBO_TRAINER_INFO
) A;

SELECT * FROM TRAINING_SESSION_CSVDATA A, MBO_TRAINER_INFO B
WHERE A.TRAINING_ID = B.TRAINING_ID;

SELECT * FROM TRAINING A LEFT JOIN PLAYER_PATHWAY B
ON A.PLAYER_PATHWAY_ID = B._ID;

SELECT COUNT(*) FROM FIVETRAN.MONGO_TOCADB.TRAINING
WHERE SITE_ID = '616713' OR SITE_ID = '614203' OR SITE_ID = '276683' OR SITE_ID = '115'
OR SITE_ID = '276364' OR SITE_ID = '3720';

SELECT * FROM MAIN A, TRAINER_INFO B
WHERE A.TRAINING_ID = B.TRAINING_ID
UNION ALL
SELECT * FROM MAIN A, MBO_TRAINER_INFO B
WHERE A.TRAINING_ID = B.TRAINING_ID;


SELECT TRAINING_ID, MBO_TRAINER_ID, TRAINER_NAME, COUNT(*) FROM MBO_TRAINER_INFO
GROUP BY TRAINING_ID, MBO_TRAINER_ID, TRAINER_NAME HAVING COUNT(*) > 1;

SELECT DISTINCT TRAINER_NAME FROM MAIN
WHERE TRAINER_NAME LIKE '%Alvarez%';

SELECT DISTINCT SITE_ID FROM MAIN;

SELECT * FROM MAIN WHERE NUMBER_OF_PLAYERS = '0';

SELECT DISTINCT _ID, NEW_SERVICE_CATEGORY FROM CENTRAL_DATA.MART.FACT_VISITS;

SELECT NUMBER_OF_EXERCISES_COMPLETED / NUMBER_OF_CUSTOM_EXERCISES_STARTED AS RATE,
       TRAINER_NAME
FROM MAIN
WHERE NUMBER_OF_CUSTOM_EXERCISES_STARTED <> '0';

SELECT B.TRAINING_ID, A.*
FROM JSON_EXERCISES A LEFT JOIN JSON_CATEGORIES B
ON A.EXERCISE_ID = B.TRAINING_ID
WHERE TRAINING_ID = '5e2f850def0acbf670fa7069';


// AVERAGE TRAINER SESSION NUMBER
CREATE TEMPORARY TABLE TRAINER_SESSION_TEMP AS (
SELECT TRAINING_ID, TRAINER_NAME, SUBSTRING(DATE, 7, 4) YEAR, SUBSTRING(DATE, 0, 2) MONTH,
       (CASE WHEN MONTH BETWEEN '01' AND '03' THEN 'Q1'
       WHEN MONTH BETWEEN '04' AND '06' THEN 'Q2'
       WHEN MONTH BETWEEN '07' AND '09' THEN 'Q3'
       WHEN MONTH BETWEEN '10' AND '12' THEN 'Q4'
       ELSE 'N/A' END) AS QUARTER
FROM MAIN
WHERE YEAR = '2021');

// Q1
CREATE TEMPORARY TABLE TRAINER_SESSION_Q1_TEMP AS (
SELECT TRAINER_NAME, SESSION_NUM, PERCENT_RANK() OVER (ORDER BY SESSION_NUM) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) SESSION_SCORE_Q1
FROM (
SELECT TRAINER_NAME, COUNT(TRAINING_ID) SESSION_NUM
FROM TRAINER_SESSION_TEMP
WHERE QUARTER = 'Q1'
GROUP BY TRAINER_NAME
) A
);

// Q2
CREATE TEMPORARY TABLE TRAINER_SESSION_Q2_TEMP AS (
SELECT TRAINER_NAME, SESSION_NUM, PERCENT_RANK() OVER (ORDER BY SESSION_NUM) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) SESSION_SCORE_Q2
FROM (
SELECT TRAINER_NAME, COUNT(TRAINING_ID) SESSION_NUM
FROM TRAINER_SESSION_TEMP
WHERE QUARTER = 'Q2'
GROUP BY TRAINER_NAME
) A
);

// Q3
CREATE TEMPORARY TABLE TRAINER_SESSION_Q3_TEMP AS (
SELECT TRAINER_NAME, SESSION_NUM, PERCENT_RANK() OVER (ORDER BY SESSION_NUM) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) SESSION_SCORE_Q3
FROM (
SELECT TRAINER_NAME, COUNT(TRAINING_ID) SESSION_NUM
FROM TRAINER_SESSION_TEMP
WHERE QUARTER = 'Q3'
GROUP BY TRAINER_NAME
) A
);

// Q4
CREATE TEMPORARY TABLE TRAINER_SESSION_Q4_TEMP AS (
SELECT TRAINER_NAME, SESSION_NUM, PERCENT_RANK() OVER (ORDER BY SESSION_NUM) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) SESSION_SCORE_Q4
FROM (
SELECT TRAINER_NAME, COUNT(TRAINING_ID) SESSION_NUM
FROM TRAINER_SESSION_TEMP
WHERE QUARTER = 'Q4'
GROUP BY TRAINER_NAME
) A
);

// EXERCISES COMPLETED RATE
CREATE TEMPORARY TABLE TRAINER_EXERCISE_TEMP AS (
SELECT TRAINING_ID, TRAINER_NAME, NUMBER_OF_EXERCISES_STARTED, NUMBER_OF_EXERCISES_COMPLETED,
       SUBSTRING(DATE, 7, 4) YEAR, SUBSTRING(DATE, 0, 2) MONTH,
       (CASE WHEN MONTH BETWEEN '01' AND '03' THEN 'Q1'
       WHEN MONTH BETWEEN '04' AND '06' THEN 'Q2'
       WHEN MONTH BETWEEN '07' AND '09' THEN 'Q3'
       WHEN MONTH BETWEEN '10' AND '12' THEN 'Q4'
       ELSE 'N/A' END) AS QUARTER
FROM MAIN
WHERE YEAR = '2021');

// Q1
CREATE TEMPORARY TABLE TRAINER_EXERCISE_Q1_TEMP AS (
SELECT TRAINER_NAME, COMPLETED_RATE, PERCENT_RANK() OVER (ORDER BY COMPLETED_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) EXERCISE_SCORE_Q1
FROM (
SELECT TRAINER_NAME, SUM(NUMBER_OF_EXERCISES_COMPLETED) / SUM(NUMBER_OF_EXERCISES_STARTED) AS COMPLETED_RATE
FROM TRAINER_EXERCISE_TEMP
WHERE QUARTER = 'Q1'
GROUP BY TRAINER_NAME
) A
);

// Q2
CREATE TEMPORARY TABLE TRAINER_EXERCISE_Q2_TEMP AS (
SELECT TRAINER_NAME, COMPLETED_RATE, PERCENT_RANK() OVER (ORDER BY COMPLETED_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) EXERCISE_SCORE_Q2
FROM (
SELECT TRAINER_NAME, SUM(NUMBER_OF_EXERCISES_COMPLETED) / SUM(NUMBER_OF_EXERCISES_STARTED) AS COMPLETED_RATE
FROM TRAINER_EXERCISE_TEMP
WHERE QUARTER = 'Q2'
GROUP BY TRAINER_NAME
) A
);

// Q3
CREATE TEMPORARY TABLE TRAINER_EXERCISE_Q3_TEMP AS (
SELECT TRAINER_NAME, COMPLETED_RATE, PERCENT_RANK() OVER (ORDER BY COMPLETED_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) EXERCISE_SCORE_Q3
FROM (
SELECT TRAINER_NAME, SUM(NUMBER_OF_EXERCISES_COMPLETED) / SUM(NUMBER_OF_EXERCISES_STARTED) AS COMPLETED_RATE
FROM TRAINER_EXERCISE_TEMP
WHERE QUARTER = 'Q3'
GROUP BY TRAINER_NAME
) A
);

// Q4
CREATE TEMPORARY TABLE TRAINER_EXERCISE_Q4_TEMP AS (
SELECT TRAINER_NAME, COMPLETED_RATE, PERCENT_RANK() OVER (ORDER BY COMPLETED_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) EXERCISE_SCORE_Q4
FROM (
SELECT TRAINER_NAME, SUM(NUMBER_OF_EXERCISES_COMPLETED) / SUM(NUMBER_OF_EXERCISES_STARTED) AS COMPLETED_RATE
FROM TRAINER_EXERCISE_TEMP
WHERE QUARTER = 'Q4'
GROUP BY TRAINER_NAME
) A
);

// EXERCISE CUSTOM COMPLETED RATE
CREATE TEMPORARY TABLE TRAINER_CUSTOM_EXERCISE_TEMP AS (
SELECT TRAINING_ID, TRAINER_NAME, NUMBER_OF_CUSTOM_EXERCISES_STARTED, NUMBER_OF_CUSTOM_EXERCISES_COMPLETED,
       SUBSTRING(DATE, 7, 4) YEAR, SUBSTRING(DATE, 0, 2) MONTH,
       (CASE WHEN MONTH BETWEEN '01' AND '03' THEN 'Q1'
           WHEN MONTH BETWEEN '04' AND '06' THEN 'Q2'
           WHEN MONTH BETWEEN '07' AND '09' THEN 'Q3'
           WHEN MONTH BETWEEN '10' AND '12' THEN 'Q4'
           ELSE 'N/A' END) AS QUARTER
FROM MAIN
WHERE YEAR = '2021');

// Q1
CREATE TEMPORARY TABLE TRAINER_CUSTOM_EXERCISE_Q1_TEMP AS (
SELECT TRAINER_NAME, COMPLETED_RATE, PERCENT_RANK() OVER (ORDER BY COMPLETED_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) CUSTOM_SCORE_Q1
FROM (
SELECT TRAINER_NAME,
       (CASE WHEN (SUM(NUMBER_OF_CUSTOM_EXERCISES_STARTED) + SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED)) <> '0'
        THEN SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED) /
       (SUM(NUMBER_OF_CUSTOM_EXERCISES_STARTED) + SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED))
        ELSE '0' END) AS COMPLETED_RATE
FROM TRAINER_CUSTOM_EXERCISE_TEMP
WHERE QUARTER = 'Q1'
GROUP BY TRAINER_NAME
) A
);

// Q2
CREATE TEMPORARY TABLE TRAINER_CUSTOM_EXERCISE_Q2_TEMP AS (
SELECT TRAINER_NAME, COMPLETED_RATE, PERCENT_RANK() OVER (ORDER BY COMPLETED_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) CUSTOM_SCORE_Q2
FROM (
SELECT TRAINER_NAME,
       (CASE WHEN (SUM(NUMBER_OF_CUSTOM_EXERCISES_STARTED) + SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED)) <> '0'
        THEN SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED) /
       (SUM(NUMBER_OF_CUSTOM_EXERCISES_STARTED) + SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED))
        ELSE '0' END) AS COMPLETED_RATE
FROM TRAINER_CUSTOM_EXERCISE_TEMP
WHERE QUARTER = 'Q2'
GROUP BY TRAINER_NAME
) A
);

// Q3
CREATE TEMPORARY TABLE TRAINER_CUSTOM_EXERCISE_Q3_TEMP AS (
SELECT TRAINER_NAME, COMPLETED_RATE, PERCENT_RANK() OVER (ORDER BY COMPLETED_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) CUSTOM_SCORE_Q3
FROM (
SELECT TRAINER_NAME,
       (CASE WHEN (SUM(NUMBER_OF_CUSTOM_EXERCISES_STARTED) + SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED)) <> '0'
        THEN SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED) /
       (SUM(NUMBER_OF_CUSTOM_EXERCISES_STARTED) + SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED))
        ELSE '0' END) AS COMPLETED_RATE
FROM TRAINER_CUSTOM_EXERCISE_TEMP
WHERE QUARTER = 'Q3'
GROUP BY TRAINER_NAME
) A
);

// Q4
CREATE TEMPORARY TABLE TRAINER_CUSTOM_EXERCISE_Q4_TEMP AS (
SELECT TRAINER_NAME, COMPLETED_RATE, PERCENT_RANK() OVER (ORDER BY COMPLETED_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) CUSTOM_SCORE_Q4
FROM (
SELECT TRAINER_NAME,
       (CASE WHEN (SUM(NUMBER_OF_CUSTOM_EXERCISES_STARTED) + SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED)) <> '0'
        THEN SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED) /
       (SUM(NUMBER_OF_CUSTOM_EXERCISES_STARTED) + SUM(NUMBER_OF_CUSTOM_EXERCISES_COMPLETED))
        ELSE '0' END) AS COMPLETED_RATE
FROM TRAINER_CUSTOM_EXERCISE_TEMP
WHERE QUARTER = 'Q4'
GROUP BY TRAINER_NAME
) A
);

// AVERAGE WEIGHT OF PASS * ACCURACY RATE
CREATE TEMPORARY TABLE WEIGHT_PASS_TEMP AS (
SELECT TRAINING_ID, TRAINER_NAME, WEIGHT_OF_PASS, TOTAL_GOALS, TOTAL_BALLS_FIRED,
       SUBSTRING(DATE, 7, 4) YEAR, SUBSTRING(DATE, 0, 2) MONTH,
       (CASE WHEN MONTH BETWEEN '01' AND '03' THEN 'Q1'
       WHEN MONTH BETWEEN '04' AND '06' THEN 'Q2'
       WHEN MONTH BETWEEN '07' AND '09' THEN 'Q3'
       WHEN MONTH BETWEEN '10' AND '12' THEN 'Q4'
       ELSE 'N/A' END) AS QUARTER
FROM MAIN
WHERE YEAR = '2021');

// Q1
CREATE TEMPORARY TABLE WEIGHT_ACCURACY_Q1_TEMP AS (
SELECT TRAINER_NAME, WEIGHT_ACCURACY_RATE, PERCENT_RANK() OVER (ORDER BY WEIGHT_ACCURACY_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) WEIGHT_ACCURACY_SCORE_Q1
FROM (
SELECT A.*, WEIGHT_OF_PASS * ACCURACY_RATE AS WEIGHT_ACCURACY_RATE
FROM (
SELECT TRAINER_NAME, AVG(WEIGHT_OF_PASS) AS WEIGHT_OF_PASS, (CASE WHEN SUM(TOTAL_BALLS_FIRED) <> '0'
        THEN SUM(TOTAL_GOALS) / SUM(TOTAL_BALLS_FIRED)
        ELSE '0' END) AS ACCURACY_RATE
FROM WEIGHT_PASS_TEMP
WHERE QUARTER = 'Q1'
GROUP BY TRAINER_NAME
) A
) A
);

// Q2
CREATE TEMPORARY TABLE WEIGHT_ACCURACY_Q2_TEMP AS (
SELECT TRAINER_NAME, WEIGHT_ACCURACY_RATE, PERCENT_RANK() OVER (ORDER BY WEIGHT_ACCURACY_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) WEIGHT_ACCURACY_SCORE_Q2
FROM (
SELECT A.*, WEIGHT_OF_PASS * ACCURACY_RATE AS WEIGHT_ACCURACY_RATE
FROM (
SELECT TRAINER_NAME, AVG(WEIGHT_OF_PASS) AS WEIGHT_OF_PASS, (CASE WHEN SUM(TOTAL_BALLS_FIRED) <> '0'
        THEN SUM(TOTAL_GOALS) / SUM(TOTAL_BALLS_FIRED)
        ELSE '0' END) AS ACCURACY_RATE
FROM WEIGHT_PASS_TEMP
WHERE QUARTER = 'Q2'
GROUP BY TRAINER_NAME
) A
) A
);

// Q3
CREATE TEMPORARY TABLE WEIGHT_ACCURACY_Q3_TEMP AS (
SELECT TRAINER_NAME, WEIGHT_ACCURACY_RATE, PERCENT_RANK() OVER (ORDER BY WEIGHT_ACCURACY_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) WEIGHT_ACCURACY_SCORE_Q3
FROM (
SELECT A.*, WEIGHT_OF_PASS * ACCURACY_RATE AS WEIGHT_ACCURACY_RATE
FROM (
SELECT TRAINER_NAME, AVG(WEIGHT_OF_PASS) AS WEIGHT_OF_PASS, (CASE WHEN SUM(TOTAL_BALLS_FIRED) <> '0'
        THEN SUM(TOTAL_GOALS) / SUM(TOTAL_BALLS_FIRED)
        ELSE '0' END) AS ACCURACY_RATE
FROM WEIGHT_PASS_TEMP
WHERE QUARTER = 'Q3'
GROUP BY TRAINER_NAME
) A
) A
);

// Q4
CREATE TEMPORARY TABLE WEIGHT_ACCURACY_Q4_TEMP AS (
SELECT TRAINER_NAME, WEIGHT_ACCURACY_RATE, PERCENT_RANK() OVER (ORDER BY WEIGHT_ACCURACY_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) WEIGHT_ACCURACY_SCORE_Q4
FROM (
SELECT A.*, WEIGHT_OF_PASS * ACCURACY_RATE AS WEIGHT_ACCURACY_RATE
FROM (
SELECT TRAINER_NAME, AVG(WEIGHT_OF_PASS) AS WEIGHT_OF_PASS, (CASE WHEN SUM(TOTAL_BALLS_FIRED) <> '0'
        THEN SUM(TOTAL_GOALS) / SUM(TOTAL_BALLS_FIRED)
        ELSE '0' END) AS ACCURACY_RATE
FROM WEIGHT_PASS_TEMP
WHERE QUARTER = 'Q4'
GROUP BY TRAINER_NAME
) A
) A
);

// PASS STREAK RATE
CREATE TEMPORARY TABLE PASS_STREAK_TEMP AS (
SELECT TRAINING_ID, TRAINER_NAME,
       (CASE WHEN PASSES_STREAK IS NULL THEN '0' ELSE PASSES_STREAK END) AS PASSES_STREAK,
       (CASE WHEN PASSES_COMPLETED IS NULL THEN '0' ELSE PASSES_COMPLETED END) AS PASSES_COMPLETED,
       SUBSTRING(DATE, 7, 4) YEAR, SUBSTRING(DATE, 0, 2) MONTH,
       (CASE WHEN MONTH BETWEEN '01' AND '03' THEN 'Q1'
       WHEN MONTH BETWEEN '04' AND '06' THEN 'Q2'
       WHEN MONTH BETWEEN '07' AND '09' THEN 'Q3'
       WHEN MONTH BETWEEN '10' AND '12' THEN 'Q4'
       ELSE 'N/A' END) AS QUARTER
FROM MAIN
WHERE YEAR = '2021');

// Q1
CREATE TEMPORARY TABLE PASS_STREAK_Q1_TEMP AS (
SELECT TRAINER_NAME, PASS_STREAK_RATE, PERCENT_RANK() OVER (ORDER BY PASS_STREAK_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) PASS_STREAK_SCORE_Q1
FROM (
SELECT TRAINER_NAME,
       (CASE WHEN SUM(PASSES_COMPLETED) <> '0'
        THEN SUM(PASSES_STREAK) / SUM(PASSES_COMPLETED)
        ELSE '0' END) AS PASS_STREAK_RATE
FROM PASS_STREAK_TEMP
WHERE QUARTER = 'Q1'
GROUP BY TRAINER_NAME
) A
);

// Q2
CREATE TEMPORARY TABLE PASS_STREAK_Q2_TEMP AS (
SELECT TRAINER_NAME, PASS_STREAK_RATE, PERCENT_RANK() OVER (ORDER BY PASS_STREAK_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) PASS_STREAK_SCORE_Q2
FROM (
SELECT TRAINER_NAME,
       (CASE WHEN SUM(PASSES_COMPLETED) <> '0'
        THEN SUM(PASSES_STREAK) / SUM(PASSES_COMPLETED)
        ELSE '0' END) AS PASS_STREAK_RATE
FROM PASS_STREAK_TEMP
WHERE QUARTER = 'Q2'
GROUP BY TRAINER_NAME
) A
);

// Q3
CREATE TEMPORARY TABLE PASS_STREAK_Q3_TEMP AS (
SELECT TRAINER_NAME, PASS_STREAK_RATE, PERCENT_RANK() OVER (ORDER BY PASS_STREAK_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) PASS_STREAK_SCORE_Q3
FROM (
SELECT TRAINER_NAME,
       (CASE WHEN SUM(PASSES_COMPLETED) <> '0'
        THEN SUM(PASSES_STREAK) / SUM(PASSES_COMPLETED)
        ELSE '0' END) AS PASS_STREAK_RATE
FROM PASS_STREAK_TEMP
WHERE QUARTER = 'Q3'
GROUP BY TRAINER_NAME
) A
);

// Q4
CREATE TEMPORARY TABLE PASS_STREAK_Q4_TEMP AS (
SELECT TRAINER_NAME, PASS_STREAK_RATE, PERCENT_RANK() OVER (ORDER BY PASS_STREAK_RATE) PERCENTAGE,
       (CASE WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '1'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '10'
        ELSE 'N/A' END) PASS_STREAK_SCORE_Q4
FROM (
SELECT TRAINER_NAME,
       (CASE WHEN SUM(PASSES_COMPLETED) <> '0'
        THEN SUM(PASSES_STREAK) / SUM(PASSES_COMPLETED)
        ELSE '0' END) AS PASS_STREAK_RATE
FROM PASS_STREAK_TEMP
WHERE QUARTER = 'Q4'
GROUP BY TRAINER_NAME
) A
);

// AVERAGE IDLE TIME
CREATE TEMPORARY TABLE AVERAGE_IDLE_TEMP AS (
SELECT TRAINING_ID, TRAINER_NAME, AVERAGE_EXERCISES_IDLE_TIME, SUBSTRING(DATE, 7, 4) YEAR, SUBSTRING(DATE, 0, 2) MONTH,
       (CASE WHEN MONTH BETWEEN '01' AND '03' THEN 'Q1'
       WHEN MONTH BETWEEN '04' AND '06' THEN 'Q2'
       WHEN MONTH BETWEEN '07' AND '09' THEN 'Q3'
       WHEN MONTH BETWEEN '10' AND '12' THEN 'Q4'
       ELSE 'N/A' END) AS QUARTER
FROM MAIN
WHERE YEAR = '2021');

// Q1
CREATE TEMPORARY TABLE AVERAGE_IDLE_Q1_TEMP AS (
SELECT TRAINER_NAME, AVERAGE_IDLE_TIME, PERCENT_RANK() OVER (ORDER BY AVERAGE_IDLE_TIME) as PERCENTAGE,
       (CASE WHEN AVERAGE_IDLE_TIME = '0' THEN '1'
        WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '10'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '1'
        ELSE 'N/A' END) AVERAGE_IDLE_SCORE_Q1
FROM (
SELECT TRAINER_NAME, AVG(AVERAGE_EXERCISES_IDLE_TIME) AS AVERAGE_IDLE_TIME
FROM AVERAGE_IDLE_TEMP
WHERE QUARTER = 'Q1'
GROUP BY TRAINER_NAME
) A
);

// Q2
CREATE TEMPORARY TABLE AVERAGE_IDLE_Q2_TEMP AS (
SELECT TRAINER_NAME, AVERAGE_IDLE_TIME, PERCENT_RANK() OVER (ORDER BY AVERAGE_IDLE_TIME) as PERCENTAGE,
       (CASE WHEN AVERAGE_IDLE_TIME = '0' THEN '1'
        WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '10'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '1'
        ELSE 'N/A' END) AVERAGE_IDLE_SCORE_Q2
FROM (
SELECT TRAINER_NAME, AVG(AVERAGE_EXERCISES_IDLE_TIME) AS AVERAGE_IDLE_TIME
FROM AVERAGE_IDLE_TEMP
WHERE QUARTER = 'Q2'
GROUP BY TRAINER_NAME
) A
);

// Q3
CREATE TEMPORARY TABLE AVERAGE_IDLE_Q3_TEMP AS (
SELECT TRAINER_NAME, AVERAGE_IDLE_TIME, PERCENT_RANK() OVER (ORDER BY AVERAGE_IDLE_TIME) as PERCENTAGE,
       (CASE WHEN AVERAGE_IDLE_TIME = '0' THEN '1'
        WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '10'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '1'
        ELSE 'N/A' END) AVERAGE_IDLE_SCORE_Q3
FROM (
SELECT TRAINER_NAME, AVG(AVERAGE_EXERCISES_IDLE_TIME) AS AVERAGE_IDLE_TIME
FROM AVERAGE_IDLE_TEMP
WHERE QUARTER = 'Q3'
GROUP BY TRAINER_NAME
) A
);

// Q4
CREATE TEMPORARY TABLE AVERAGE_IDLE_Q4_TEMP AS (
SELECT TRAINER_NAME, AVERAGE_IDLE_TIME, PERCENT_RANK() OVER (ORDER BY AVERAGE_IDLE_TIME) as PERCENTAGE,
       (CASE WHEN AVERAGE_IDLE_TIME = '0' THEN '1'
        WHEN PERCENTAGE BETWEEN '0' AND '0.1' THEN '10'
        WHEN PERCENTAGE BETWEEN '0.1' AND '0.2' THEN '9'
        WHEN PERCENTAGE BETWEEN '0.2' AND '0.3' THEN '8'
        WHEN PERCENTAGE BETWEEN '0.3' AND '0.4' THEN '7'
        WHEN PERCENTAGE BETWEEN '0.4' AND '0.5' THEN '6'
        WHEN PERCENTAGE BETWEEN '0.5' AND '0.6' THEN '5'
        WHEN PERCENTAGE BETWEEN '0.6' AND '0.7' THEN '4'
        WHEN PERCENTAGE BETWEEN '0.7' AND '0.8' THEN '3'
        WHEN PERCENTAGE BETWEEN '0.8' AND '0.9' THEN '2'
        WHEN PERCENTAGE BETWEEN '0.9' AND '1' THEN '1'
        ELSE 'N/A' END) AVERAGE_IDLE_SCORE_Q4
FROM (
SELECT TRAINER_NAME, AVG(AVERAGE_EXERCISES_IDLE_TIME) AS AVERAGE_IDLE_TIME
FROM AVERAGE_IDLE_TEMP
WHERE QUARTER = 'Q4'
GROUP BY TRAINER_NAME
) A
);

// CREATE SCORE TABLE
// Q1
CREATE TABLE Q1_SCORE AS (
SELECT A.TRAINER_NAME, SESSION_SCORE_Q1, EXERCISE_SCORE_Q1, CUSTOM_SCORE_Q1, WEIGHT_ACCURACY_SCORE_Q1, PASS_STREAK_SCORE_Q1,
       AVERAGE_IDLE_SCORE_Q1,
       (0.2*SESSION_SCORE_Q1 + 0.2*EXERCISE_SCORE_Q1 + 0.2*CUSTOM_SCORE_Q1 + 0.2*WEIGHT_ACCURACY_SCORE_Q1 + 0.1*PASS_STREAK_SCORE_Q1
        + 0.1*AVERAGE_IDLE_SCORE_Q1) OVERALL_SCORE_Q1
FROM TRAINER_SESSION_Q1_TEMP A, TRAINER_EXERCISE_Q1_TEMP B, TRAINER_CUSTOM_EXERCISE_Q1_TEMP C, WEIGHT_ACCURACY_Q1_TEMP D,
     PASS_STREAK_Q1_TEMP E, AVERAGE_IDLE_Q1_TEMP F
WHERE A.TRAINER_NAME = B.TRAINER_NAME AND A.TRAINER_NAME = C.TRAINER_NAME AND A.TRAINER_NAME = D.TRAINER_NAME
AND A.TRAINER_NAME = E.TRAINER_NAME AND A.TRAINER_NAME = F.TRAINER_NAME
ORDER BY OVERALL_SCORE_Q1 DESC
);

// Q2
CREATE TABLE Q2_SCORE AS (
SELECT A.TRAINER_NAME, SESSION_SCORE_Q2, EXERCISE_SCORE_Q2, CUSTOM_SCORE_Q2, WEIGHT_ACCURACY_SCORE_Q2, PASS_STREAK_SCORE_Q2,
       AVERAGE_IDLE_SCORE_Q2,
       (0.2*SESSION_SCORE_Q2 + 0.2*EXERCISE_SCORE_Q2 + 0.2*CUSTOM_SCORE_Q2 + 0.2*WEIGHT_ACCURACY_SCORE_Q2 + 0.1*PASS_STREAK_SCORE_Q2
        + 0.1*AVERAGE_IDLE_SCORE_Q2) OVERALL_SCORE_Q2
FROM TRAINER_SESSION_Q2_TEMP A, TRAINER_EXERCISE_Q2_TEMP B, TRAINER_CUSTOM_EXERCISE_Q2_TEMP C, WEIGHT_ACCURACY_Q2_TEMP D,
     PASS_STREAK_Q2_TEMP E, AVERAGE_IDLE_Q2_TEMP F
WHERE A.TRAINER_NAME = B.TRAINER_NAME AND A.TRAINER_NAME = C.TRAINER_NAME AND A.TRAINER_NAME = D.TRAINER_NAME
AND A.TRAINER_NAME = E.TRAINER_NAME AND A.TRAINER_NAME = F.TRAINER_NAME
ORDER BY OVERALL_SCORE_Q2 DESC
);

// Q3
CREATE TABLE Q3_SCORE AS (
SELECT A.TRAINER_NAME, SESSION_SCORE_Q3, EXERCISE_SCORE_Q3, CUSTOM_SCORE_Q3, WEIGHT_ACCURACY_SCORE_Q3, PASS_STREAK_SCORE_Q3,
       AVERAGE_IDLE_SCORE_Q3,
       (0.2*SESSION_SCORE_Q3 + 0.2*EXERCISE_SCORE_Q3 + 0.2*CUSTOM_SCORE_Q3 + 0.2*WEIGHT_ACCURACY_SCORE_Q3 + 0.1*PASS_STREAK_SCORE_Q3
        + 0.1*AVERAGE_IDLE_SCORE_Q3) OVERALL_SCORE_Q3
FROM TRAINER_SESSION_Q3_TEMP A, TRAINER_EXERCISE_Q3_TEMP B, TRAINER_CUSTOM_EXERCISE_Q3_TEMP C, WEIGHT_ACCURACY_Q3_TEMP D,
     PASS_STREAK_Q3_TEMP E, AVERAGE_IDLE_Q3_TEMP F
WHERE A.TRAINER_NAME = B.TRAINER_NAME AND A.TRAINER_NAME = C.TRAINER_NAME AND A.TRAINER_NAME = D.TRAINER_NAME
AND A.TRAINER_NAME = E.TRAINER_NAME AND A.TRAINER_NAME = F.TRAINER_NAME
ORDER BY OVERALL_SCORE_Q3 DESC
);

// Q4
CREATE TABLE Q4_SCORE AS (
SELECT A.TRAINER_NAME, SESSION_SCORE_Q4, EXERCISE_SCORE_Q4, CUSTOM_SCORE_Q4, WEIGHT_ACCURACY_SCORE_Q4, PASS_STREAK_SCORE_Q4,
       AVERAGE_IDLE_SCORE_Q4,
       (0.2*SESSION_SCORE_Q4 + 0.2*EXERCISE_SCORE_Q4 + 0.2*CUSTOM_SCORE_Q4 + 0.2*WEIGHT_ACCURACY_SCORE_Q4 + 0.1*PASS_STREAK_SCORE_Q4
        + 0.1*AVERAGE_IDLE_SCORE_Q4) OVERALL_SCORE_Q4
FROM TRAINER_SESSION_Q4_TEMP A, TRAINER_EXERCISE_Q4_TEMP B, TRAINER_CUSTOM_EXERCISE_Q4_TEMP C, WEIGHT_ACCURACY_Q4_TEMP D,
     PASS_STREAK_Q4_TEMP E, AVERAGE_IDLE_Q4_TEMP F
WHERE A.TRAINER_NAME = B.TRAINER_NAME AND A.TRAINER_NAME = C.TRAINER_NAME AND A.TRAINER_NAME = D.TRAINER_NAME
AND A.TRAINER_NAME = E.TRAINER_NAME AND A.TRAINER_NAME = F.TRAINER_NAME
ORDER BY OVERALL_SCORE_Q4 DESC
);

// PLAYGROUND
SELECT * FROM Q1_SCORE ORDER BY OVERALL_SCORE DESC LIMIT 20;

SELECT COUNT(*) FROM FIVETRAN.MONGO_TOCADB.TRAINING_SESSION_CSVDATA;

// ADD MORE DATA TO MAIN TABLE
SELECT A.*, B.BEST_STREAK, B.PASSES_STREAK, B.PASSES_COMPLETED, B.WEIGHT_OF_PASS, B.RECOVERIES, C.AVERAGE_EXERCISES_IDLE_TIME,
       C.EXERCISES_IDLE_GREATER_THAN_151_SECONDS_IN_MILLIS, C.EXERCISES_IDLE_BETWEEN_121_TO_150_SECONDS_IN_MILLIS,
       C.EXERCISES_IDLE_BETWEEN_91_TO_120_SECONDS_IN_MILLIS, C.EXERCISES_IDLE_FOR_LESS_THAN_90_SECONDS_IN_MILLIS,
       C.EXERCISES_COUNT_IDLE_FOR_GREATER_THAN_151_SECONDS, C.EXERCISES_COUNT_IDLE_BETWEEN_121_TO_150_SECONDS,
       C.EXERCISES_COUNT_IDLE_BETWEEN_91_TO_120_SECONDS, C.EXERCISES_COUNT_IDLE_FOR_LESS_THAN_90_SECONDS
FROM MAIN A LEFT JOIN FIVETRAN.MONGO_TOCADB.TRAINING B
ON A.TRAINING_ID = B._ID
LEFT JOIN FIVETRAN.MONGO_TOCADB.TRAINING_SESSION_CSVDATA C
ON A.TRAINING_ID = C.TRAINING_ID;

CREATE TABLE MAIN_2 AS (
SELECT A.*, B.BEST_STREAK, B.PASSES_STREAK, B.PASSES_COMPLETED, B.WEIGHT_OF_PASS, B.RECOVERIES, C.AVERAGE_EXERCISES_IDLE_TIME,
       C.EXERCISES_IDLE_GREATER_THAN_151_SECONDS_IN_MILLIS, C.EXERCISES_IDLE_BETWEEN_121_TO_150_SECONDS_IN_MILLIS,
       C.EXERCISES_IDLE_BETWEEN_91_TO_120_SECONDS_IN_MILLIS, C.EXERCISES_IDLE_FOR_LESS_THAN_90_SECONDS_IN_MILLIS,
       C.EXERCISES_COUNT_IDLE_FOR_GREATER_THAN_151_SECONDS, C.EXERCISES_COUNT_IDLE_BETWEEN_121_TO_150_SECONDS,
       C.EXERCISES_COUNT_IDLE_BETWEEN_91_TO_120_SECONDS, C.EXERCISES_COUNT_IDLE_FOR_LESS_THAN_90_SECONDS
FROM MAIN A LEFT JOIN FIVETRAN.MONGO_TOCADB.TRAINING B
ON A.TRAINING_ID = B._ID
LEFT JOIN FIVETRAN.MONGO_TOCADB.TRAINING_SESSION_CSVDATA C
ON A.TRAINING_ID = C.TRAINING_ID
);

SELECT TRAINING_ID,
       (CASE WHEN NUMBER_OF_EXERCISES_STARTED <> '0'
        THEN NUMBER_OF_EXERCISES_COMPLETED / NUMBER_OF_EXERCISES_STARTED
        ELSE '0' END) COMPLETED_RATE,
       (CASE WHEN (NUMBER_OF_CUSTOM_EXERCISES_STARTED + NUMBER_OF_CUSTOM_EXERCISES_COMPLETED) <> '0'
        THEN NUMBER_OF_CUSTOM_EXERCISES_COMPLETED /
       (NUMBER_OF_CUSTOM_EXERCISES_STARTED + NUMBER_OF_CUSTOM_EXERCISES_COMPLETED)
        ELSE '0' END) AS CUSTOM_COMPLETED_RATE,
       (CASE WHEN TOTAL_BALLS_FIRED <> '0'
        THEN TOTAL_GOALS / TOTAL_BALLS_FIRED
        ELSE '0' END) ACCURACY_RATE,
        (CASE WHEN PASSES_COMPLETED <> '0'
        THEN PASSES_STREAK / PASSES_COMPLETED
        ELSE '0' END) AS PASS_STREAK_RATE,
        WEIGHT_OF_PASS, AVERAGE_EXERCISES_IDLE_TIME,
       SUBSTRING(DATE, 7, 4) YEAR, SUBSTRING(DATE, 0, 2) MONTH,
       (CASE WHEN MONTH BETWEEN '01' AND '03' THEN 'Q1'
           WHEN MONTH BETWEEN '04' AND '06' THEN 'Q2'
           WHEN MONTH BETWEEN '07' AND '09' THEN 'Q3'
           WHEN MONTH BETWEEN '10' AND '12' THEN 'Q4'
           ELSE 'N/A' END) QUARTER
FROM PU_TEAM_3.PU_TEAM_3.MAIN
WHERE YEAR = '2021';

